lua_shared_dict daily_limit 10m;

geo $limit_key {
    default $binary_remote_addr;

    58.34.148.64/29 "";
    120.132.28.122 "";
    120.132.28.123 "";
    120.132.28.124 "";
    120.132.28.125 "";
}

server {
    listen       80;
    server_name  <domain>;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen       443 ssl;
    http2        on;
    server_name  <domain>;

    ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;
    
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";

    location / {
        access_by_lua_block {
            if ngx.var.limit_key == "" then
                return
            end

            local daily_limit = ngx.shared.daily_limit
            local ip = ngx.var.binary_remote_addr

            local count, err = daily_limit:get(ip)

            if not count then
                local seconds_until_midnight = 86400 - (os.time() % 86400)
                daily_limit:set(ip, 1, seconds_until_midnight)
            elseif count >= 5 then
                return ngx.exit(429)
            else
                daily_limit:incr(ip, 1)
            end
        }

        if ($request_method !~ ^(GET|HEAD)$ ) {
            return 405;
        }

        proxy_pass http://sss;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
